{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOvCTuKMTscG34qoHB3Kzum"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["Experiment 1:\n","Timestep Reduction to the mean of 2 consecutive hours\n","\n","Network: MLP"],"metadata":{"id":"MOe3D01_b6c5"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"adV_JP_iSXtz","executionInfo":{"status":"ok","timestamp":1713937984874,"user_tz":240,"elapsed":2123,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}},"outputId":"1fceb1cc-1577-47fd-cfa6-12bc37695195"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","execution_count":22,"metadata":{"id":"9LKjqB17RsAx","executionInfo":{"status":"ok","timestamp":1713937984875,"user_tz":240,"elapsed":12,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}}},"outputs":[],"source":["# Loading necessary libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","from sklearn.preprocessing import MinMaxScaler\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","import warnings\n","\n","# Ignore warnings\n","warnings.filterwarnings('ignore')\n","np.set_printoptions(threshold=np.inf, precision=2, linewidth=200)\n","np.set_printoptions(suppress=True, precision=2)"]},{"cell_type":"markdown","source":["As a first step, we load the raw data from our source."],"metadata":{"id":"5_cfNVgTSOkv"}},{"cell_type":"code","source":["# Defining the source path\n","route_folder = \"/content/drive/My Drive/Centro de Transporte/Francisco/2023/Abril 2024/\"\n","\n","# Loading the tensor\n","tensor = np.load(route_folder+'tensor.npy')\n","# 110 original coordinates\n","ori_coords = pd.read_csv(route_folder+'ori_coords.csv')"],"metadata":{"id":"OcNVmAd4ThkB","executionInfo":{"status":"ok","timestamp":1713937984875,"user_tz":240,"elapsed":11,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["Now, we are going to reduce our time steps by averaging over consecutive 2-hour intervals."],"metadata":{"id":"_a7WF7mq4NtN"}},{"cell_type":"code","source":["if tensor.shape[0] % 2 == 0:\n","    tensor_reshaped = tensor.reshape(-1, 2, tensor.shape[1], tensor.shape[2])\n","    tensor_new = tensor_reshaped.mean(axis=1)"],"metadata":{"id":"BYPwmKbL9L_g","executionInfo":{"status":"ok","timestamp":1713937984875,"user_tz":240,"elapsed":11,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["tensor_new.shape"],"metadata":{"id":"l39NNUci9hOI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713937984875,"user_tz":240,"elapsed":9,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}},"outputId":"f170f9cf-2a8a-4367-c6ac-6516121658d5"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(942, 44, 15)"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","source":["Now that we have preprocessed our matrices, we will apply min-max scaling normalization to all our steps"],"metadata":{"id":"uTKzbBZv3UkB"}},{"cell_type":"code","source":["scaler = MinMaxScaler(feature_range=(0, 1))\n","\n","tensor_reshaped = tensor_new.reshape(-1, 15)\n","scaled_tensor = scaler.fit_transform(tensor_reshaped)\n","scaled_tensor = scaled_tensor.reshape(-1, 44, 15)"],"metadata":{"id":"UDJtPaPO3hhC","executionInfo":{"status":"ok","timestamp":1713937984875,"user_tz":240,"elapsed":7,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}}},"execution_count":26,"outputs":[]},{"cell_type":"markdown","source":["Now that we have normalized our tensor, we divide it into training, validation, and testing sets."],"metadata":{"id":"z9X6OEIR3sYL"}},{"cell_type":"code","source":["train_percent = 0.7\n","val_percent = 0.15\n","test_percent = 0.15\n","\n","total_examples = scaled_tensor.shape[0]\n","num_train_examples = int(total_examples * train_percent)\n","num_val_examples = int(total_examples * val_percent)\n","num_test_examples = total_examples - num_train_examples - num_val_examples\n","\n","train_tensor = scaled_tensor[:num_train_examples]\n","val_tensor = scaled_tensor[num_train_examples:num_train_examples+num_val_examples]\n","test_tensor = scaled_tensor[num_train_examples+num_val_examples:]\n","\n","# Add a final dimension of 1 channel; this is necessary to feed it into our network\n","train_tensor = train_tensor.reshape((train_tensor.shape[0], train_tensor.shape[1], train_tensor.shape[2], 1))\n","val_tensor = val_tensor.reshape((val_tensor.shape[0], val_tensor.shape[1], val_tensor.shape[2], 1))\n","test_tensor = test_tensor.reshape((test_tensor.shape[0], test_tensor.shape[1], test_tensor.shape[2], 1))\n","\n","print(train_tensor.shape, val_tensor.shape, test_tensor.shape)"],"metadata":{"id":"ZBpFWxTv3qv0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713937984875,"user_tz":240,"elapsed":7,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}},"outputId":"2923a5be-6fb3-4a85-dea2-c28dfd93f508"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["(659, 44, 15, 1) (141, 44, 15, 1) (142, 44, 15, 1)\n"]}]},{"cell_type":"markdown","source":["Now, we will generate the sequences"],"metadata":{"id":"GfZTA9Jk4uUB"}},{"cell_type":"code","source":["def crear_secuencias(tensor, longitud_secuencia):\n","    secuencias_x = []\n","    secuencias_y = []\n","    for i in range(len(tensor) - longitud_secuencia):\n","        secuencia_x = tensor[i:i+longitud_secuencia]\n","        secuencia_y = tensor[i+longitud_secuencia:i+longitud_secuencia+1]\n","        secuencias_x.append(secuencia_x)\n","        secuencias_y.append(secuencia_y)\n","    return np.array(secuencias_x), np.array(secuencias_y)\n","\n","#  1  2  3   4   5   6   7   8   9   10  11  12\n","# [8][9][10][11][12][13][14][15][16][17][18][19] -> [8]\n","\n","longitud_secuencia = 12\n","\n","x_train, y_train = crear_secuencias(train_tensor, longitud_secuencia)\n","x_val, y_val = crear_secuencias(val_tensor, longitud_secuencia)\n","x_test, y_test = crear_secuencias(test_tensor, longitud_secuencia)\n","\n","# Flatten process needed for MLP network\n","x_train_flattened = x_train.reshape((x_train.shape[0], -1))\n","y_train_flattened = y_train.reshape((y_train.shape[0], -1))\n","\n","x_val_flattened = x_val.reshape((x_val.shape[0], -1))\n","y_val_flattened = y_val.reshape((y_val.shape[0], -1))\n","\n","x_test_flattened = x_test.reshape((x_test.shape[0], -1))\n","y_test_flattened = y_test.reshape((y_test.shape[0], -1))\n","\n","print(\"Training Dataset Shapes: \" + str(x_train_flattened.shape) + \", \" + str(y_train_flattened.shape))\n","print(\"Validation Dataset Shapes: \" + str(x_val_flattened.shape) + \", \" + str(y_val_flattened.shape))\n","print(\"Validation Dataset Shapes: \" + str(x_test_flattened.shape) + \", \" + str(y_test_flattened.shape))"],"metadata":{"id":"nvE-iW98381I","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713938122957,"user_tz":240,"elapsed":312,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}},"outputId":"2760b04d-3c63-4f22-e423-08558d85f587"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Training Dataset Shapes: (647, 7920), (647, 660)\n","Validation Dataset Shapes: (129, 7920), (129, 660)\n","Validation Dataset Shapes: (130, 7920), (130, 660)\n"]}]},{"cell_type":"markdown","source":["Up to this point, we have preprocessed our tensors and they are ready to be fed into our neural network. But before that, we need to define our network."],"metadata":{"id":"KIUUb4Vf47_a"}},{"cell_type":"markdown","source":["Now, we define our MLP network"],"metadata":{"id":"dKuKXSPQ5S6v"}},{"cell_type":"code","source":["from keras.models import Sequential\n","from keras.layers import Dense, Flatten\n","\n","model = Sequential()\n","model.add(Dense(256, activation='relu', input_shape=(x_train_flattened.shape[1],)))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(y_train_flattened.shape[1], activation='linear'))  # Output layer"],"metadata":{"id":"_Thb-OR-5Sao","executionInfo":{"status":"ok","timestamp":1713938125568,"user_tz":240,"elapsed":3,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["# Compiling the model\n","model.compile(optimizer='adam', loss='mse')\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VuMqSYrG5h8D","executionInfo":{"status":"ok","timestamp":1713938126315,"user_tz":240,"elapsed":298,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}},"outputId":"85c8d22f-a867-424d-bb9b-26622961c38c"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_12 (Dense)            (None, 256)               2027776   \n","                                                                 \n"," dense_13 (Dense)            (None, 128)               32896     \n","                                                                 \n"," dense_14 (Dense)            (None, 660)               85140     \n","                                                                 \n","=================================================================\n","Total params: 2145812 (8.19 MB)\n","Trainable params: 2145812 (8.19 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["Now that we have our network defined, let's train it."],"metadata":{"id":"O7WzcmQF5nHM"}},{"cell_type":"code","source":["# Define some callbacks to improve training.\n","early_stopping = keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=10)\n","reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor=\"val_loss\", patience=5)\n","\n","# Define modifiable training hyperparameters.\n","epochs = 500\n","batch_size = 64\n","\n","# Fit the model to the training data.\n","model.fit(\n","    x_train_flattened,\n","    y_train_flattened,\n","    batch_size=batch_size,\n","    epochs=epochs,\n","    validation_data=(x_val_flattened, y_val_flattened),\n","    callbacks=[early_stopping, reduce_lr],\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6BxawDce5lbB","executionInfo":{"status":"ok","timestamp":1713938133916,"user_tz":240,"elapsed":6272,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}},"outputId":"18954b16-08c6-4dcb-c834-e09b291c6357"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/500\n","11/11 [==============================] - 3s 28ms/step - loss: 0.0425 - val_loss: 0.0230 - lr: 0.0010\n","Epoch 2/500\n","11/11 [==============================] - 0s 7ms/step - loss: 0.0102 - val_loss: 0.0060 - lr: 0.0010\n","Epoch 3/500\n","11/11 [==============================] - 0s 11ms/step - loss: 0.0037 - val_loss: 0.0043 - lr: 0.0010\n","Epoch 4/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0027 - val_loss: 0.0035 - lr: 0.0010\n","Epoch 5/500\n","11/11 [==============================] - 0s 10ms/step - loss: 0.0024 - val_loss: 0.0034 - lr: 0.0010\n","Epoch 6/500\n","11/11 [==============================] - 0s 10ms/step - loss: 0.0023 - val_loss: 0.0034 - lr: 0.0010\n","Epoch 7/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0033 - lr: 0.0010\n","Epoch 8/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0033 - lr: 0.0010\n","Epoch 9/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0033 - lr: 0.0010\n","Epoch 10/500\n","11/11 [==============================] - 0s 10ms/step - loss: 0.0022 - val_loss: 0.0033 - lr: 0.0010\n","Epoch 11/500\n","11/11 [==============================] - 0s 13ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 0.0010\n","Epoch 12/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0033 - lr: 0.0010\n","Epoch 13/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-04\n","Epoch 14/500\n","11/11 [==============================] - 0s 10ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-04\n","Epoch 15/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-04\n","Epoch 16/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-04\n","Epoch 17/500\n","11/11 [==============================] - 0s 10ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-04\n","Epoch 18/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-05\n","Epoch 19/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-05\n","Epoch 20/500\n","11/11 [==============================] - 0s 10ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-05\n","Epoch 21/500\n","11/11 [==============================] - 0s 10ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-05\n","Epoch 22/500\n","11/11 [==============================] - 0s 10ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-05\n","Epoch 23/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-06\n","Epoch 24/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-06\n","Epoch 25/500\n","11/11 [==============================] - 0s 10ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-06\n","Epoch 26/500\n","11/11 [==============================] - 0s 10ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-06\n","Epoch 27/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-06\n","Epoch 28/500\n","11/11 [==============================] - 0s 9ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-07\n","Epoch 29/500\n","11/11 [==============================] - 0s 11ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-07\n","Epoch 30/500\n","11/11 [==============================] - 0s 11ms/step - loss: 0.0022 - val_loss: 0.0032 - lr: 1.0000e-07\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7835642c1f00>"]},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","source":["Let's plot the loss"],"metadata":{"id":"N0XtKp9s-P5c"}},{"cell_type":"code","source":["history = model.history.history\n","\n","plt.figure(figsize=(14, 5))\n","\n","plt.subplot(1, 2, 1)\n","plt.plot(history['loss'], label='Training Loss')\n","plt.plot(history['val_loss'], label='Validation Loss')\n","plt.title('Training and Validation Loss')\n","plt.ylabel('Loss')\n","plt.xlabel('Epoch')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"U-GB3gjO5ujD","executionInfo":{"status":"ok","timestamp":1713938134444,"user_tz":240,"elapsed":531,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}},"outputId":"5b650100-8259-4d05-a490-0e8e7d0d4238"},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Now, let's generate the evaluation metrics for the dimensions 44x15, 15x15, and the 110 coordinates."],"metadata":{"id":"iNovqiYT-jGo"}},{"cell_type":"code","source":["train_prediction = model.predict(x_train_flattened)\n","\n","train_prediction_reshaped = train_prediction.reshape(-1, 15)\n","train_prediction_original_scale = scaler.inverse_transform(train_prediction_reshaped)\n","train_prediction_original_scale = train_prediction_original_scale.reshape(-1, 44, 15)\n","\n","y_train_reshaped = y_train.reshape(-1, 15)\n","y_train_original_scale = scaler.inverse_transform(y_train_reshaped)\n","y_train_original_scale = y_train_original_scale.reshape(-1, 44, 15)\n","\n","val_prediction = model.predict(x_val_flattened)\n","\n","val_prediction_reshaped = val_prediction.reshape(-1, 15)\n","val_prediction_original_scale = scaler.inverse_transform(val_prediction_reshaped)\n","val_prediction_original_scale = val_prediction_original_scale.reshape(-1, 44, 15)\n","\n","y_val_reshaped = y_val.reshape(-1, 15)\n","y_val_original_scale = scaler.inverse_transform(y_val_reshaped)\n","y_val_original_scale = y_val_original_scale.reshape(-1, 44, 15)\n","\n","test_prediction = model.predict(x_test_flattened)\n","\n","test_prediction_reshaped = test_prediction.reshape(-1, 15)\n","test_prediction_original_scale = scaler.inverse_transform(test_prediction_reshaped)\n","test_prediction_original_scale = test_prediction_original_scale.reshape(-1, 44, 15)\n","\n","y_test_reshaped = y_test.reshape(-1, 15)\n","y_test_original_scale = scaler.inverse_transform(y_test_reshaped)\n","y_test_original_scale = y_test_original_scale.reshape(-1, 44, 15)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nIX-v5Tn-VYJ","executionInfo":{"status":"ok","timestamp":1713938134828,"user_tz":240,"elapsed":399,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}},"outputId":"4ba73ae0-3ae1-499c-ecf6-da0b0e11d4fb"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["21/21 [==============================] - 0s 2ms/step\n","5/5 [==============================] - 0s 2ms/step\n","5/5 [==============================] - 0s 2ms/step\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","\n","def calcular_metricas_3d(original_tensor, prediccion_tensor):\n","\n","    sum_mae, sum_mse, sum_rmse, sum_r2 = 0, 0, 0, 0\n","\n","    for i in range(original_tensor.shape[0]):\n","        mae = mean_absolute_error(original_tensor[i], prediccion_tensor[i])\n","        mse = mean_squared_error(original_tensor[i], prediccion_tensor[i])\n","        rmse = np.sqrt(mse)\n","        r2 = r2_score(original_tensor[i].flatten(), prediccion_tensor[i].flatten())\n","\n","        sum_mae += mae\n","        sum_mse += mse\n","        sum_rmse += rmse\n","        sum_r2 += r2\n","\n","    avg_mae = sum_mae / original_tensor.shape[0]\n","    avg_mse = sum_mse / original_tensor.shape[0]\n","    avg_rmse = sum_rmse / original_tensor.shape[0]\n","    avg_r2 = sum_r2 / original_tensor.shape[0]\n","\n","    return avg_mae, avg_mse, avg_rmse, avg_r2"],"metadata":{"id":"ATmsGRat_EWA","executionInfo":{"status":"ok","timestamp":1713938134828,"user_tz":240,"elapsed":12,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}}},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":["Metrics for 44x15"],"metadata":{"id":"FR2WvelW_MOG"}},{"cell_type":"code","source":["mae, mse, rmse, r2 = calcular_metricas_3d(y_train_original_scale, train_prediction_original_scale)\n","\n","print(\"Training:\")\n","print(f\"Average MAE: {mae:.3f}\")\n","print(f\"Average MSE: {mse:.3f}\")\n","print(f\"Average RMSE: {rmse:.3f}\")\n","print(f\"Average R^2: {r2:.3f}\")\n","print(\"\")\n","\n","mae, mse, rmse, r2 = calcular_metricas_3d(y_val_original_scale, val_prediction_original_scale)\n","\n","print(\"Validation:\")\n","print(f\"Average MAE: {mae:.3f}\")\n","print(f\"Average MSE: {mse:.3f}\")\n","print(f\"Average RMSE: {rmse:.3f}\")\n","print(f\"Average R^2: {r2:.3f}\")\n","print(\"\")\n","\n","mae, mse, rmse, r2 = calcular_metricas_3d(y_test_original_scale, test_prediction_original_scale)\n","\n","print(\"Test:\")\n","print(f\"Average MAE: {mae:.3f}\")\n","print(f\"Average MSE: {mse:.3f}\")\n","print(f\"Average RMSE: {rmse:.3f}\")\n","print(f\"Average R^2: {r2:.3f}\")\n","print(\"\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YCkjRYsc_K7r","executionInfo":{"status":"ok","timestamp":1713938135476,"user_tz":240,"elapsed":659,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}},"outputId":"81f6d71d-dab8-41f8-e5ff-3a8e8b1f56bf"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Training:\n","Average MAE: 1.736\n","Average MSE: 15.257\n","Average RMSE: 3.837\n","Average R^2: 0.916\n","\n","Validation:\n","Average MAE: 2.169\n","Average MSE: 21.972\n","Average RMSE: 4.633\n","Average R^2: 0.903\n","\n","Test:\n","Average MAE: 2.225\n","Average MSE: 22.157\n","Average RMSE: 4.669\n","Average R^2: 0.902\n","\n"]}]},{"cell_type":"markdown","source":["Metrics for 15x15"],"metadata":{"id":"j-MP14If_f4U"}},{"cell_type":"code","source":["def postprocess(arr):\n","  unshifted_matrix = np.empty_like(arr)\n","  for i in range(arr.shape[1]):\n","      n = i\n","      unshifted_matrix[:, i] = np.concatenate((arr[-n:, i], arr[:-n, i]))\n","\n","  unpadded_matrix = unshifted_matrix[14:, :]\n","  downsampled_matrix = unpadded_matrix[::2]\n","\n","  return downsampled_matrix\n","\n","# Training:\n","# Postprocess originals\n","postprocessed_originals_train = []\n","for i in range(y_train_original_scale.shape[0]):\n","    postprocessed_matrix = postprocess(y_train_original_scale[i])\n","    postprocessed_originals_train.append(postprocessed_matrix)\n","postprocessed_original_arr_train = np.array(postprocessed_originals_train)\n","\n","# Postprocess predictions\n","postprocessed_predictions_train = []\n","for i in range(train_prediction_original_scale.shape[0]):\n","    postprocessed_matrix = postprocess(train_prediction_original_scale[i])\n","    postprocessed_predictions_train.append(postprocessed_matrix)\n","\n","postprocessed_predictions_arr_train = np.array(postprocessed_predictions_train)\n","\n","# Validation:\n","# Postprocess originals\n","postprocessed_originals_val = []\n","for i in range(y_val_original_scale.shape[0]):\n","    postprocessed_matrix = postprocess(y_val_original_scale[i])\n","    postprocessed_originals_val.append(postprocessed_matrix)\n","postprocessed_original_arr_val = np.array(postprocessed_originals_val)\n","\n","# Postprocess predictions\n","postprocessed_predictions_val = []\n","for i in range(val_prediction_original_scale.shape[0]):\n","    postprocessed_matrix = postprocess(val_prediction_original_scale[i])\n","    postprocessed_predictions_val.append(postprocessed_matrix)\n","\n","postprocessed_predictions_arr_val = np.array(postprocessed_predictions_val)\n","\n","# Testing:\n","# Postprocess originals\n","postprocessed_originals_test = []\n","for i in range(y_test_original_scale.shape[0]):\n","    postprocessed_matrix = postprocess(y_test_original_scale[i])\n","    postprocessed_originals_test.append(postprocessed_matrix)\n","postprocessed_original_arr_test = np.array(postprocessed_originals_test)\n","\n","# Postprocess predictions\n","postprocessed_predictions_test = []\n","for i in range(test_prediction_original_scale.shape[0]):\n","    postprocessed_matrix = postprocess(test_prediction_original_scale[i])\n","    postprocessed_predictions_test.append(postprocessed_matrix)\n","\n","postprocessed_predictions_arr_test = np.array(postprocessed_predictions_test)\n","\n","# Calcular las métricas promedio\n","mae, mse, rmse, r2 = calcular_metricas_3d(postprocessed_original_arr_train, postprocessed_predictions_arr_train)\n","\n","print(\"Training:\")\n","print(f\"Average MAE: {mae:.3f}\")\n","print(f\"Average MSE: {mse:.3f}\")\n","print(f\"Average RMSE: {rmse:.3f}\")\n","print(f\"Average R^2: {r2:.3f}\")\n","print(\"\")\n","\n","mae, mse, rmse, r2 = calcular_metricas_3d(postprocessed_original_arr_val, postprocessed_predictions_arr_val)\n","\n","print(\"Validation:\")\n","print(f\"Average MAE: {mae:.3f}\")\n","print(f\"Average MSE: {mse:.3f}\")\n","print(f\"Average RMSE: {rmse:.3f}\")\n","print(f\"Average R^2: {r2:.3f}\")\n","print(\"\")\n","\n","mae, mse, rmse, r2 = calcular_metricas_3d(postprocessed_original_arr_test, postprocessed_predictions_arr_test)\n","\n","print(\"Test:\")\n","print(f\"Average MAE: {mae:.3f}\")\n","print(f\"Average MSE: {mse:.3f}\")\n","print(f\"Average RMSE: {rmse:.3f}\")\n","print(f\"Average R^2: {r2:.3f}\")\n","print(\"\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MXc8wkPw_awT","executionInfo":{"status":"ok","timestamp":1713938136077,"user_tz":240,"elapsed":604,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}},"outputId":"1618e1e5-8d62-4237-da15-9e51ebe4e494"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Training:\n","Average MAE: 2.365\n","Average MSE: 22.244\n","Average RMSE: 4.632\n","Average R^2: 0.894\n","\n","Validation:\n","Average MAE: 2.944\n","Average MSE: 31.940\n","Average RMSE: 5.585\n","Average R^2: 0.879\n","\n","Test:\n","Average MAE: 3.022\n","Average MSE: 32.229\n","Average RMSE: 5.630\n","Average R^2: 0.878\n","\n"]}]},{"cell_type":"markdown","source":["Metrics for 110 coordinates"],"metadata":{"id":"XWCqTLps_2w3"}},{"cell_type":"code","source":["# We convert the data into dataframes and combine actual vs. predictions\n","def array_to_dataframe(arr):\n","    ids = []\n","    is_list = []\n","    js_list = []\n","    velocidades = []\n","\n","    for id in range(arr.shape[0]):\n","        for i in range(arr.shape[1]):\n","            for j in range(arr.shape[2]):\n","                ids.append(id)\n","                is_list.append(i)\n","                js_list.append(j)\n","                velocidades.append(arr[id, i, j])\n","\n","    df = pd.DataFrame({\n","        'id': ids,\n","        'i': is_list,\n","        'j': js_list,\n","        'speed': velocidades\n","    })\n","\n","    return df\n","\n","# Training:\n","df_actuals_train = array_to_dataframe(postprocessed_original_arr_train)\n","df_preds_train = array_to_dataframe(postprocessed_predictions_arr_train)\n","\n","df_original_train = df_actuals_train.rename(columns={'speed': 'speed_actual'})\n","df_predictions_train = df_preds_train.rename(columns={'speed': 'speed_predicted'})\n","\n","df_results_train = pd.merge(df_original_train, df_predictions_train, on=['id','i', 'j'], how='inner')\n","# ----------------------------#\n","\n","# Validation:\n","df_actuals_val = array_to_dataframe(postprocessed_original_arr_val)\n","df_preds_val = array_to_dataframe(postprocessed_predictions_arr_val)\n","\n","df_original_val = df_actuals_val.rename(columns={'speed': 'speed_actual'})\n","df_predictions_val = df_preds_val.rename(columns={'speed': 'speed_predicted'})\n","\n","df_results_val = pd.merge(df_original_val, df_predictions_val, on=['id','i', 'j'], how='inner')\n","# ----------------------------#\n","\n","# Test:\n","df_actuals_test = array_to_dataframe(postprocessed_original_arr_test)\n","df_preds_test = array_to_dataframe(postprocessed_predictions_arr_test)\n","\n","df_original_test = df_actuals_test.rename(columns={'speed': 'speed_actual'})\n","df_predictions_test = df_preds_test.rename(columns={'speed': 'speed_predicted'})\n","\n","df_results_test = pd.merge(df_original_test, df_predictions_test, on=['id','i', 'j'], how='inner')\n","# ----------------------------#\n","\n","\n","results_110_train = pd.merge(ori_coords, df_results_train, on=['i','j'])\n","results_110_val = pd.merge(ori_coords, df_results_val, on=['i','j'])\n","results_110_test = pd.merge(ori_coords, df_results_test, on=['i','j'])\n","\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","from math import sqrt\n","\n","def calculate_metrics(df):\n","    y_true = df['speed_actual']\n","    y_pred = df['speed_predicted']\n","\n","    mae = mean_absolute_error(y_true, y_pred)\n","    mse = mean_squared_error(y_true, y_pred)\n","    rmse = sqrt(mse)\n","    r2 = r2_score(y_true, y_pred)\n","\n","    mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n","    smape = 100 * np.mean(2 * np.abs(y_pred - y_true) / (np.abs(y_pred) + np.abs(y_true)))\n","    maaape = np.mean(np.arctan(np.abs((y_true - y_pred) / y_true))) * 100\n","\n","    return mae, mse, rmse, r2, mape, smape, maaape\n","\n","\n","mae, mse, rmse, r2, mape, smape, maaape = calculate_metrics(results_110_train)\n","\n","print(\"Training:\")\n","print(\"----------\")\n","print(f\"Average MAE: {mae:.3f}\")\n","print(f\"Average MSE: {mse:.3f}\")\n","print(f\"Average RMSE: {rmse:.3f}\")\n","print(f\"Average R^2: {r2:.3f}\")\n","print(f\"Average MAPE: {mape:.3f}\")\n","print(f\"Average SMAPE: {smape:.3f}\")\n","print(f\"Average MAAPE: {maaape:.3f}\")\n","print(\"\")\n","\n","mae, mse, rmse, r2, mape, smape, maaape = calculate_metrics(results_110_val)\n","\n","print(\"Validation:\")\n","print(\"----------\")\n","print(f\"Average MAE: {mae:.3f}\")\n","print(f\"Average MSE: {mse:.3f}\")\n","print(f\"Average RMSE: {rmse:.3f}\")\n","print(f\"Average R^2: {r2:.3f}\")\n","print(f\"Average MAPE: {mape:.3f}\")\n","print(f\"Average SMAPE: {smape:.3f}\")\n","print(f\"Average MAAPE: {maaape:.3f}\")\n","print(\"\")\n","\n","mae, mse, rmse, r2, mape, smape, maaape = calculate_metrics(results_110_test)\n","\n","print(\"Testing:\")\n","print(\"----------\")\n","print(f\"Average MAE: {mae:.3f}\")\n","print(f\"Average MSE: {mse:.3f}\")\n","print(f\"Average RMSE: {rmse:.3f}\")\n","print(f\"Average R^2: {r2:.3f}\")\n","print(f\"Average MAPE: {mape:.3f}\")\n","print(f\"Average SMAPE: {smape:.3f}\")\n","print(f\"Average MAAPE: {maaape:.3f}\")\n","print(\"\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ag4h2kCU_0zh","executionInfo":{"status":"ok","timestamp":1713938137310,"user_tz":240,"elapsed":412,"user":{"displayName":"Francisco Bahamondes","userId":"00213026708078343362"}},"outputId":"32c0e5cb-5b91-4240-dd8c-4cc43560b700"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Training:\n","----------\n","Average MAE: 4.312\n","Average MSE: 44.353\n","Average RMSE: 6.660\n","Average R^2: 0.640\n","Average MAPE: inf\n","Average SMAPE: 36.088\n","Average MAAPE: 32.138\n","\n","Validation:\n","----------\n","Average MAE: 5.346\n","Average MSE: 63.543\n","Average RMSE: 7.971\n","Average R^2: 0.609\n","Average MAPE: inf\n","Average SMAPE: 38.111\n","Average MAAPE: 34.106\n","\n","Testing:\n","----------\n","Average MAE: 5.465\n","Average MSE: 63.972\n","Average RMSE: 7.998\n","Average R^2: 0.611\n","Average MAPE: inf\n","Average SMAPE: 38.697\n","Average MAAPE: 34.825\n","\n"]}]}]}